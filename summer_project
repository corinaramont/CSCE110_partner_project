# File:
# Author: Ritika Annapareddy, Corina Ramont
# Date:
# Emails: ra2958@tamu.edu, corinaramont.tamu.edu

import matplotlib.pyplot as drawing
"""The matplotlib module is used for creating bar charts and pie graphs."""
import os
"""The os module is used for accessing other directory paths and creating ones."""
import statistics
"""The statistics module is used for calculations in option4 like standard deviation."""

def grade_gathering(person_grades):
    """This function collects each grade from the list of grades for that specific UIN."""

    avg_indiv_lab_grade1 = (person_grades[0] + person_grades[1]+ person_grades[2] + person_grades[3] + person_grades[4] + person_grades[5]) / 6
    avg_quiz_grade1 = (person_grades[6] + person_grades[7] + person_grades[8] + person_grades[9] + person_grades[10] + person_grades[11]) / 6
    avg_reading_grade1 = (person_grades[12] + person_grades[13] + person_grades[14] + person_grades[15] + person_grades[16] + person_grades[17]) / 6
    """This gathers all the lab grades, quiz grades, and reading activity grades of a student and calculates the average grade for each."""

    exam1_grade1 = person_grades[18]
    exam2_grade1 = person_grades[19]
    exam3_grade1 = person_grades[20]
    """These statements store the exam 1, exam 2, and exam 3 grade of a student."""

    project_grade1 = person_grades[21]
    """This stores the project grade of a student."""
    exams_mean1 = (exam1_grade1 + exam2_grade1 + exam3_grade1) / 3
    """This calculates the average exam grade of a student."""

    return avg_indiv_lab_grade1, avg_quiz_grade1, avg_reading_grade1, exam1_grade1, exam2_grade1, exam3_grade1, project_grade1, exams_mean1
    """The statement returns all the stored and calculated variables from the grade_gathering function."""


def letter_grade(grade):
    """This function determines the letter grade of the numerical grade."""
    letter = ""
    if grade >= 90 and grade <= 100:
        letter = 'A'
    elif grade >= 80 and grade <= 89:
        letter = 'B'
    elif grade >= 70 and grade <= 79:
        letter = 'C'
    elif grade >= 60 and grade <= 69:
        letter = 'D'
    elif grade < 60:
        letter = 'F'
    """These if statements categorize numerical grades to a certain letter grade."""

    return letter
    """The statement returns the letter grade for the numerical grade from the letter_grade function."""

def option1():
    """The function reads a file when the user inputs the file's name."""
    id_grades = dict()
    file_name = input("Enter only the file name: ")
    """This asks the user to input a file name for the function to read."""
    try:
        with open(file_name, 'r') as file_contents:
            content = file_contents.read().split("\n")
            content.remove(content[0])

        for line in content:
            if line[0:10] == "":
                pass
            else:
                id_grades[line[0:10]] = line[11::]
        """This reads the grades.csv file and collects the data to be of use for the rest of the functions."""
        print("File has been successfully read!\n")
        """This reads the file's contents and if passed, this means the file has been read successfully."""
    except:
        print("File could not be read.\n")
    """This statement prints if the file could not be read."""

    return id_grades

def option2(data_base):
    """The function generates a report for a student in a text file by entering the student’s UIN with name of the file as UIN.txt where UIN is the student’s UIN"""

    uin_valid = False
    membership = False
    while uin_valid == False:
        uin_choice = input("Enter student's UIN: ")
        for uin in data_base.keys():
            if uin_choice == uin:
                membership = True
                break
            else:
                membership = False
        if len(uin_choice) != 10 or uin_choice.isdigit() == False or membership == False:
            print("Error >> the UIN is not in the correct format and/or the UIN does not exist. Please try again.\n")
            continue
        else:
            uin_valid = True
    """uin_valid and membership are false at first which then the while statement determines if the UIN input exists and is valid."""

    file_name = uin_choice + ".txt"
    """file_name is customized by saving the file as the student's UIN."""

    grades = data_base[uin_choice].split(",")
    grades = [float(n) for n in grades]
    avg_indiv_lab_grade, avg_quiz_grade, avg_reading_grade, exam1_grade, exam2_grade, exam3_grade, project_grade, exams_mean = grade_gathering(grades)
    """To get these variables, this calls the grade_gathering function."""

    score = (0.15 * (exam1_grade + exam2_grade + exam3_grade)) + (0.25 * avg_indiv_lab_grade) + (0.10 * avg_quiz_grade) + (0.10 * avg_reading_grade) + (0.10 * project_grade)
    score = round(score,1)
    """This calculates the numerical grade of the student."""

    grade_letter = letter_grade(score)
    """To get the grade_letter variable, this calls the letter_grade function."""

    with open(file_name, "w") as report_text:
        report_text.write(f"Exams mean: {round(exams_mean, 1)}\n")
        report_text.write(f"Labs mean: {round(avg_indiv_lab_grade, 1)}\n")
        report_text.write(f"Quizzes mean: {round(avg_quiz_grade, 1)}\n")
        report_text.write(f"Reading activities mean: {round(avg_reading_grade, 1)}\n")
        report_text.write(f"Score: {score}%\n")
        report_text.write(f"Letter grade: {grade_letter}\n")
    """The with statement opens the custom UIN file and writes the student's information to the file."""

def option3(data_base):
    '''This function generates an individualized bar graphs for a student by typing in their UIN.'''

    uin_choice = input("Enter student's UIN: ")
    """uin_choice asks for the user to input the student's UIN."""
    grades = data_base[uin_choice].split(",")
    grades = [float(n) for n in grades]
    """The grades list then collects the individual grades associated with the student's UIN."""
    color = ['c', 'r', 'g', 'b', 'm', 'y']
    """The colors list gives an option of colors for the bar charts to use later on in this function."""

    save_path = str(os.getcwd())
    new_save_path = save_path + '/' + uin_choice
    if os.path.exists(new_save_path):
        pass
    else:
        os.mkdir(new_save_path)
    """This creates a custom directory and save path for the bar chart files to save in. The directory will be created if it doesn't exist already."""

    exams = ["1", "2", "3"]
    exam_grades = [grades[18], grades[19], grades[20]]
    exam_bars = drawing.bar(exams, exam_grades)
    drawing.xlabel("Exam numbers")
    drawing.ylabel("Exam grades")
    drawing.title(f"Exam Grades For {uin_choice}")
    for n in range(len(exam_bars)):
        exam_bars[n].set_color(color[n])
    drawing.show()
    drawing.savefig(os.path.join(new_save_path, f"{uin_choice}_exam_grades.png"))
    """Data, labels, and colors are added to the bar graph when shown and a customized file name for the student's exam grades bar chart is saved."""

    labs = ["1", "2", "3", "4", "5", "6"]
    lab_grades = [grades[0], grades[1], grades[2], grades[3], grades[4],grades[5]]
    lab_bars = drawing.bar(labs, lab_grades)
    drawing.xlabel("Lab numbers")
    drawing.ylabel("Lab grades")
    drawing.title(f"Lab Grades For {uin_choice}")
    for n in range(len(lab_bars)):
        lab_bars[n].set_color(color[n])
    drawing.show()
    drawing.savefig(os.path.join(save_path, f"{uin_choice}_lab_grades.png"))
    """Data, labels, and colors are added to the bar graph when shown and a customized file name for the student's lab grades bar chart is saved."""

    quizzes = ["1", "2", "3", "4", "5", "6"]
    quiz_grades = [grades[6], grades[7], grades[8], grades[9], grades[10],grades[11]]
    quiz_bars = drawing.bar(quizzes, quiz_grades)
    drawing.xlabel("Quiz numbers")
    drawing.ylabel("Quiz grades")
    drawing.title(f"Quiz Grades for {uin_choice}")
    for n in range(len(quiz_bars)):
        quiz_bars[n].set_color(color[n])
    drawing.show()
    drawing.savefig(os.path.join(save_path, f"{uin_choice}_quiz_grades.png"))
    """Data, labels, and colors are added to the bar graph when shown and a customized file name for the student's quiz grades bar chart is saved."""

    readings = ["1", "2", "3", "4", "5", "6"]
    reading_grades = [grades[12], grades[13], grades[14], grades[15], grades[16],grades[17]]
    reading_bars = drawing.bar(readings, reading_grades)
    drawing.xlabel("Reading activity numbers")
    drawing.ylabel("Reading activity grades")
    drawing.title(f"Reading Activity Grades for {uin_choice}")
    for n in range(len(reading_bars)):
        reading_bars[n].set_color(color[n])
    drawing.show()
    drawing.savefig(os.path.join(save_path, f"{uin_choice}_reading_activity_grades.png"))
    """Data, labels, and colors are added to the bar graph when shown and a customized file name for the student's reading activity grades bar chart is saved."""

def option4(data_base):
    '''The program generates a report of the whole class in a  new file which includes mean, median, max, min and standard deviation of all the students scores '''

    for keys, value in data_base.items():
        grades = data_base[keys].split(',')
        grades = [float(n) for n in grades]
        avg_indiv_lab_grade, avg_quiz_grade, avg_reading_grade, exam1_grade, exam2_grade, exam3_grade, project_grade, exams_mean = grade_gathering(grades)
        score = (0.15 * (exam1_grade + exam2_grade + exam3_grade)) + (0.25 * avg_indiv_lab_grade) + (0.10 * avg_quiz_grade) + (0.10 * avg_reading_grade) + (0.10 * project_grade)
        score = round(score, 1)
        data_base[keys] = score
    """The student's total score is calculated and is saved as the value for each key (student's UIN)"""

    min_score = min(data_base.values())
    max_score = max(data_base.values())
    value_list = list(data_base.values())
    median = statistics.median(value_list)
    mean = sum(value_list) / len(value_list)
    total_students = len(value_list)
    standard_dev = statistics.stdev(value_list)
    """This finds the minimum, maximum, median, mean and standard deviation of the students total score"""

    with open("report.txt", "w") as class_report:
        class_report.write(f"Total number of students: {total_students}\n")
        class_report.write(f"Minimum score: {round(min_score, 1)}\n")
        class_report.write(f"Maximum score: {round(max_score, 1)}\n")
        class_report.write(f"Median score: {round(median, 1)}\n")
        class_report.write(f"Mean score: {round(mean, 1)}\n")
        class_report.write(f"Standard deviation: {round(standard_dev, 1)}\n")
    """The with statement writes the report of min, max, median, mean, and standard deviation to a new file: report.txt"""

def option5(data_base):
    '''This function generates a pie chart and a bar graph of the grade distributions of the whole class'''

    for keys, value in data_base.items():
        grades = data_base[keys].split(',')
        grades = [float(n) for n in grades]
        avg_indiv_lab_grade, avg_quiz_grade, avg_reading_grade, exam1_grade, exam2_grade, exam3_grade, project_grade, exams_mean = grade_gathering(grades)
        score = (0.15*(exam1_grade + exam2_grade + exam3_grade)) + (0.25*avg_indiv_lab_grade) + (0.10*avg_quiz_grade) + (0.10*avg_reading_grade) + (0.10*project_grade)
        score = round(score,1)
        data_base[keys] = score
    """This calculates the total score of each student and saves it as the value for each key (students UIN)."""

    grade_distribution = list(data_base.values())
    a = 0
    b = 0
    c = 0
    d = 0
    f = 0
    for i in grade_distribution:
        letter_score = letter_grade(i)
        if letter_score == "A":
            a += 1
        elif letter_score == "B":
            b += 1
        elif letter_score == "C":
            c += 1
        elif letter_score == "D":
            d += 1
        elif letter_score == "F":
            f += 1
    """This counts how many students earn each letter grade."""

    colors = ['c', 'r', 'g', 'b', 'm']
    save_path = str(os.getcwd())
    new_save_path = save_path + '/' + 'class_charts'
    if os.path.exists(new_save_path):
        pass
    else:
        os.mkdir(new_save_path)
    """This saves all of the class charts to a new directory called class_charts within the current working directory."""

    grade_distribution_analyze = {"A": a, "B": b, "C": c, "D": d, "F": f}
    pie_labels = []
    pie_sizes = []
    for letter, count in grade_distribution_analyze.items():
        if grade_distribution_analyze[letter] == 0:
            pass
        else:
            pie_labels.append(letter)
            pie_sizes.append(count)
    drawing.pie(pie_sizes, labels=pie_labels, autopct='%1.1f%%', colors=colors)
    drawing.title('Grade Distribution')
    drawing.axis('equal')
    drawing.show()
    drawing.savefig(os.path.join(new_save_path, f"pie_grade_distribution.png"))
    """This creates a pie chart of the class grade distributions and saves it to a new directory."""

    bar_labels = ["A", "B", "C", "D", "F"]
    bar_grades = [a, b, c, d, f]
    grade_bar_graph = drawing.bar(bar_labels, bar_grades)
    drawing.xlabel("Letter Grades")
    drawing.ylabel("Number of Each Letter Grade")
    drawing.title("Grade Distribution")
    for n in range(len(grade_bar_graph)):
        grade_bar_graph[n].set_color(colors[n])
    drawing.show()
    drawing.savefig(os.path.join(new_save_path, f"bar_grade_distribution.png"))
    """This creates a bar graph of the class grade distribution and saves it to a new directory."""

def main():
    """This is the driver function of this program."""

    choice = ""
    id_grades = dict()
    grades_info = dict()

    while choice != "q" or choice != "quit" or choice != "6":
        print(f"*******************Main Menu*****************")
        print(f"1. Read CSV file of grades")
        print(f"2. Generate student report file")
        print(f"3. Generate student report charts")
        print(f"4. Generate class report file")
        print(f"5. Generate class report charts")
        print(f"6. Quit")
        print(f"************************************************\n")
        choice = (input("Enter option number here: "))
        print()

        if choice == "1":
            grades_info = option1()
            print(grades_info)
        elif choice == "2":
            option2(grades_info)
        elif choice == "3":
            option3(grades_info)
        elif choice == "4":
            option4(grades_info)
        elif choice == "5":
            option5(grades_info)
        elif choice == "6" or choice == "q" or choice == "quit":
            break
        else:
            print(f"An invalid option has been entered.\n")
        """The while loop allows the menu to appear repeatedly until the exception is made which stops the program."""
main()
